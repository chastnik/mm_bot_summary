#!/usr/bin/env python3
"""
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Mattermost Summary Bot
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
"""

from datetime import datetime
from typing import Dict, Any

from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse

def create_app(bot) -> FastAPI:
    """–°–æ–∑–¥–∞–µ—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º"""
    
    app = FastAPI(
        title="Mattermost Summary Bot",
        description="–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–æ–≤ –≤ Mattermost",
        version="2.0.0"
    )
    
    @app.get("/", response_class=HTMLResponse)
    async def dashboard():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –¥–∞—à–±–æ—Ä–¥–æ–º"""
        try:
            status = await bot.health_check()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            mattermost_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if status.get('mattermost_connected') else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
            llm_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if status.get('llm_connected') else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω" 
            bot_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status.get('bot_running') else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            websocket_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if status.get('websocket_connected') else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
            
            return f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mattermost Summary Bot</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            overflow: hidden;
        }}
        .header {{
            background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }}
        .header h1 {{
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }}
        .header p {{
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1em;
        }}
        .content {{
            padding: 30px;
        }}
        .status-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        .status-card {{
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            border-left: 4px solid #007bff;
            transition: transform 0.2s;
        }}
        .status-card:hover {{
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }}
        .status-card h3 {{
            margin: 0 0 10px 0;
            color: #333;
            font-size: 1.1em;
        }}
        .status-value {{
            font-size: 1.2em;
            font-weight: 500;
        }}
        .instructions {{
            background: #e7f3ff;
            border-radius: 10px;
            padding: 25px;
            margin: 20px 0;
            border-left: 4px solid #0066cc;
        }}
        .instructions h3 {{
            color: #0066cc;
            margin-top: 0;
        }}
        .code {{
            background: #2d3748;
            color: #e2e8f0;
            padding: 3px 8px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 0.9em;
        }}
        .api-links {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }}
        .api-link {{
            display: block;
            padding: 15px;
            background: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 8px;
            text-align: center;
            transition: background 0.2s;
        }}
        .api-link:hover {{
            background: #0056b3;
        }}
        .footer {{
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            color: #666;
            border-top: 1px solid #dee2e6;
        }}
        .timestamp {{
            color: #999;
            font-size: 0.9em;
            margin-top: 20px;
        }}
        @media (max-width: 768px) {{
            .container {{
                margin: 10px;
                border-radius: 10px;
            }}
            .header {{
                padding: 20px;
            }}
            .header h1 {{
                font-size: 2em;
            }}
            .content {{
                padding: 20px;
            }}
            .status-grid {{
                grid-template-columns: 1fr;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Mattermost Summary Bot</h1>
            <p>–°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
        </div>
        
        <div class="content">
            <div class="status-grid">
                <div class="status-card">
                    <h3>ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</h3>
                    <div class="status-value">{bot_status}</div>
                </div>
                <div class="status-card">
                    <h3>üí¨ Mattermost</h3>
                    <div class="status-value">{mattermost_status}</div>
                </div>
                <div class="status-card">
                    <h3>üîå WebSocket</h3>
                    <div class="status-value">{websocket_status}</div>
                </div>
                <div class="status-card">
                    <h3>üß† LLM</h3>
                    <div class="status-value">{llm_status}</div>
                </div>
            </div>
            
            <div class="instructions">
                <h3>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</h3>
                <p><strong>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</strong></p>
                <ol>
                    <li>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª: <span class="code">/invite @summary_bot</span></li>
                    <li>–í —Ç—Ä–µ–¥–µ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: <span class="code">!summary</span></li>
                    <li>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ - –±–æ—Ç —Å–æ–∑–¥–∞—Å—Ç —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–∞</li>
                    <li>–ü–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!</li>
                </ol>
                
                <p><strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:</strong></p>
                <ul>
                    <li><span class="code">!summary</span> - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</li>
                    <li><span class="code">summary</span> - –ø—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞</li>
                    <li><span class="code">—Å–∞–º–º–∞—Ä–∏</span> - –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ</li>
                    <li><span class="code">!—Å–∞–º–º–∞—Ä–∏</span> - —Ä—É—Å—Å–∫–∞—è —Å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º</li>
                </ul>
                
                <div class="warning" style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 8px; margin: 15px 0;">
                    <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ:</strong> –ö–æ–º–∞–Ω–¥—ã —Å <code>/</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä <code>/summary</code>) –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –≤ Mattermost –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å <code>!</code> –∏–ª–∏ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤.
                </div>
            </div>
            
            <div class="instructions">
                <h3>üîß API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã</h3>
                <div class="api-links">
                    <a href="/health" class="api-link">
                        ‚ù§Ô∏è Health Check
                    </a>
                    <a href="/status" class="api-link">
                        üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    </a>
                    <a href="/info" class="api-link">
                        ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
                    </a>
                    <a href="/docs" class="api-link">
                        üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
                    </a>
                </div>
            </div>
            
            <div class="timestamp">
                –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
            </div>
        </div>
        
        <div class="footer">
            <p>Mattermost Summary Bot v2.0 | –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–¥–∞–º–∏</p>
        </div>
    </div>
    
    <script>
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {{
            location.reload();
        }}, 30000);
    </script>
</body>
</html>"""
            
        except Exception as e:
            return f"""
<!DOCTYPE html>
<html>
<head><title>–û—à–∏–±–∫–∞</title></head>
<body>
    <h1>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞</h1>
    <p>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}</p>
    <a href="/">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</a>
</body>
</html>"""
    
    @app.get("/health")
    async def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        try:
            status = await bot.health_check()
            
            if status.get('mattermost_connected') and status.get('bot_running'):
                return {
                    "status": "healthy",
                    "timestamp": datetime.now().isoformat(),
                    "details": status
                }
            else:
                return JSONResponse(
                    status_code=503,
                    content={
                        "status": "unhealthy",
                        "timestamp": datetime.now().isoformat(),
                        "details": status
                    }
                )
        except Exception as e:
            return JSONResponse(
                status_code=500,
                content={
                    "status": "error",
                    "error": str(e),
                    "timestamp": datetime.now().isoformat()
                }
            )
    
    @app.get("/status")
    async def detailed_status():
        """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            status = await bot.health_check()
            return {
                "timestamp": datetime.now().isoformat(),
                "components": {
                    "bot": {
                        "running": status.get('bot_running', False),
                        "username": status.get('bot_username'),
                        "user_id": status.get('bot_user_id')
                    },
                    "mattermost": {
                        "connected": status.get('mattermost_connected', False),
                        "websocket": status.get('websocket_connected', False)
                    },
                    "llm": {
                        "connected": status.get('llm_connected', False)
                    }
                },
                "overall_status": "healthy" if all([
                    status.get('bot_running'),
                    status.get('mattermost_connected')
                ]) else "degraded"
            }
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))
    
    @app.get("/info")
    async def bot_info():
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
        try:
            status = await bot.health_check()
            return {
                "name": "Mattermost Summary Bot",
                "version": "2.0.0",
                "description": "–ë–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–æ–≤ –≤ Mattermost —Å –ø–æ–º–æ—â—å—é LLM",
                "features": [
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–æ–≤",
                    "WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥",
                    "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                    "REST API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
                ],
                "supported_commands": [
                    "!summary",
                    "summary", 
                    "—Å–∞–º–º–∞—Ä–∏",
                    "!—Å–∞–º–º–∞—Ä–∏"
                ],
                "bot_info": {
                    "username": status.get('bot_username'),
                    "user_id": status.get('bot_user_id'),
                    "running": status.get('bot_running', False)
                },
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))
    
    @app.get("/metrics")
    async def metrics():
        """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            status = await bot.health_check()
            
            # –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å Prometheus
            metrics = []
            metrics.append(f"mattermost_bot_running {1 if status.get('bot_running') else 0}")
            metrics.append(f"mattermost_connected {1 if status.get('mattermost_connected') else 0}")
            metrics.append(f"websocket_connected {1 if status.get('websocket_connected') else 0}")
            metrics.append(f"llm_connected {1 if status.get('llm_connected') else 0}")
            
            return "\n".join(metrics)
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))
    
    return app 