#!/usr/bin/env python3
"""
Mattermost Summary Bot
–û—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –∏–∑ reference –ø—Ä–æ–µ–∫—Ç–æ–≤
"""

import asyncio
import json
import logging
import re
import requests
import websockets
import ssl
import time
from typing import Dict, List, Any, Optional
from urllib.parse import urlparse

from config import Config
from llm_client import LLMClient

logger = logging.getLogger(__name__)

class MattermostBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è Mattermost
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """
    
    def __init__(self):
        self.base_url = None
        self.token = None
        self.bot_user_id = None
        self.bot_username = None
        self.llm_client = LLMClient()
        self._running = False
        self._websocket = None
        self._session_requests = requests.Session()
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mattermost Summary Bot...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            Config.validate()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º URL
            self.base_url = Config.MATTERMOST_URL.strip().rstrip('/')
            if not self.base_url.startswith(('http://', 'https://')):
                self.base_url = 'https://' + self.base_url
            
            self.token = Config.MATTERMOST_TOKEN
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
            self._session_requests.headers.update({
                'Authorization': f'Bearer {self.token}',
                'Content-Type': 'application/json'
            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mattermost
            response = self._session_requests.get(
                f"{self.base_url}/api/v4/users/me", 
                timeout=10
            )
            
            if response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Mattermost: {response.status_code}")
                return False
            
            user_data = response.json()
            self.bot_user_id = user_data['id']
            self.bot_username = user_data['username']
            
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Mattermost –∫–∞–∫ {self.bot_username} (ID: {self.bot_user_id})")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç
            await self._load_existing_channels()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LLM
            llm_ok = await self.llm_client.test_connection()
            if llm_ok:
                logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LLM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å LLM")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            return False
    
    async def _load_existing_channels(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–æ—Ç–∞)
            response = self._session_requests.get(
                f"{self.base_url}/api/v4/users/me/channels",
                timeout=10
            )
            
            if response.status_code == 200:
                channels = response.json()
                channel_count = len(channels)
                
                logger.info(f"üìã –ë–æ—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ {channel_count} –∫–∞–Ω–∞–ª(–∞—Ö)")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø—ã –∫–∞–Ω–∞–ª–æ–≤
                types_count = {}
                for channel in channels:
                    channel_type = channel.get('type', 'unknown')
                    types_count[channel_type] = types_count.get(channel_type, 0) + 1
                
                type_names = {
                    'O': '–æ—Ç–∫—Ä—ã—Ç—ã—Ö',
                    'P': '–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö', 
                    'D': '–ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π',
                    'G': '–≥—Ä—É–ø–ø–æ–≤—ã—Ö'
                }
                
                for type_code, count in types_count.items():
                    type_name = type_names.get(type_code, f'—Ç–∏–ø–∞ {type_code}')
                    logger.info(f"   ‚Ä¢ {count} {type_name} –∫–∞–Ω–∞–ª–æ–≤")
                    
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {response.status_code}")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    async def _check_channel_permissions(self, channel_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
            response = self._session_requests.get(
                f"{self.base_url}/api/v4/channels/{channel_id}/members/me",
                timeout=5
            )
            
            if response.status_code == 200:
                member_info = response.json()
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel_id}: {response.status_code}")
                return False
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return False
    
    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ WebSocket"""
        if not self.base_url or not self.token:
            logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        self._running = True
        logger.info("üéß –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π WebSocket...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        while self._running:
            try:
                await self._connect_websocket()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                if self._running:
                    logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(5)
    
    async def _connect_websocket(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        # –ü–∞—Ä—Å–∏–º URL –¥–ª—è WebSocket
        parsed_url = urlparse(self.base_url)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É WebSocket
        ws_scheme = 'wss' if parsed_url.scheme == 'https' else 'ws'
        ws_port = parsed_url.port or (443 if parsed_url.scheme == 'https' else 80)
        
        ws_url = f"{ws_scheme}://{parsed_url.hostname}:{ws_port}/api/v4/websocket"
        
        logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {ws_url}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        ssl_context = None
        if ws_scheme == 'wss':
            ssl_context = ssl.create_default_context()
            # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            # ssl_context.check_hostname = False
            # ssl_context.verify_mode = ssl.CERT_NONE
        
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
            async with websockets.connect(
                ws_url,
                ssl=ssl_context,
                ping_interval=30,
                ping_timeout=10,
                close_timeout=10
            ) as websocket:
                self._websocket = websocket
                
                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
                await self._authenticate_websocket()
                
                logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in websocket:
                    if not self._running:
                        break
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
                    if isinstance(message, bytes):
                        message_str = message.decode()
                    else:
                        message_str = str(message)
                    await self._handle_websocket_message(message_str)
                    
        except websockets.exceptions.ConnectionClosed:
            logger.warning("‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
            raise
    
    async def _authenticate_websocket(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self._websocket is None:
            raise Exception("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        auth_message = {
            "seq": 1,
            "action": "authentication_challenge",
            "data": {
                "token": self.token
            }
        }
        
        await self._websocket.send(json.dumps(auth_message))
        
        # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_timeout = 10
        start_time = time.time()
        
        while time.time() - start_time < auth_timeout:
            try:
                message = await asyncio.wait_for(self._websocket.recv(), timeout=1.0)
                event = json.loads(message)
                
                if event.get('event') == 'hello':
                    logger.info("‚úÖ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    return
                    
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket: {e}")
                raise
        
        raise Exception("–¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ WebSocket")
    
    async def _handle_websocket_message(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket"""
        try:
            event = json.loads(message)
            event_type = event.get('event')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            if event_type == 'posted':
                await self._handle_post_event(event)
            elif event_type == 'user_added':
                await self._handle_user_added_event(event)
            elif event_type == 'channel_member_added':
                await self._handle_channel_member_added_event(event)
            elif event_type == 'hello':
                logger.debug("üí¨ –ü–æ–ª—É—á–µ–Ω hello –æ—Ç WebSocket")
            else:
                logger.debug(f"üí¨ –°–æ–±—ã—Ç–∏–µ WebSocket: {event_type}")
                
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç WebSocket: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_post_event(self, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            post_data = event.get('data', {}).get('post')
            if not post_data:
                return
            
            # –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π JSON)
            if isinstance(post_data, str):
                post = json.loads(post_data)
            else:
                post = post_data
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            if post.get('user_id') == self.bot_user_id:
                return
            
            message = post.get('message', '').strip()
            channel_id = post.get('channel_id')
            post_id = post.get('id')
            root_id = post.get('root_id') or post_id  # ID —Ç—Ä–µ–¥–∞ –∏–ª–∏ —Å–∞–º–æ–≥–æ –ø–æ—Å—Ç–∞
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã
            if self._is_summary_command(message):
                logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /summary –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                await self._handle_summary_command(channel_id, root_id, post_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –ø–æ—Å—Ç–∞: {e}")
    
    async def _handle_user_added_event(self, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª"""
        try:
            data = event.get('data', {})
            user_id = data.get('user_id')
            channel_id = data.get('channel_id')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
            if user_id == self.bot_user_id:
                logger.info(f"üéâ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª: {channel_id}")
                await self._initialize_in_channel(channel_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è user_added: {e}")
    
    async def _handle_channel_member_added_event(self, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            data = event.get('data', {})
            user_id = data.get('user_id')
            channel_id = data.get('channel_id')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª
            if user_id == self.bot_user_id:
                logger.info(f"üéâ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª: {channel_id}")
                await self._initialize_in_channel(channel_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è channel_member_added: {e}")
    
    async def _initialize_in_channel(self, channel_id: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            channel_info = await self._get_channel_info(channel_id)
            if not channel_info:
                return
            
            channel_name = channel_info.get('display_name', channel_info.get('name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'))
            channel_type = channel_info.get('type', 'O')  # O=open, P=private, D=direct
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            type_emoji = {
                'O': 'üåê',  # –û—Ç–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª
                'P': 'üîí',  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª  
                'D': 'üí¨'   # –ü—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            }.get(channel_type, 'üìÅ')
            
            logger.info(f"{type_emoji} –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ '{channel_name}' (ID: {channel_id})")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)
            if channel_type in ['O', 'P']:
                welcome_message = f"""üëã –ü—Ä–∏–≤–µ—Ç! –Ø **Summary Bot** - –ø–æ–º–æ–≥–∞—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–æ–≤.

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ –í –ª—é–±–æ–º —Ç—Ä–µ–¥–µ –Ω–∞–ø–∏—à–∏—Ç–µ `!summary` - —Å–æ–∑–¥–∞–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –∫–æ–º–∞–Ω–¥—ã: `!summary`, `summary`, `—Å–∞–º–º–∞—Ä–∏`, `!—Å–∞–º–º–∞—Ä–∏`

**‚ö†Ô∏è –í–∞–∂–Ω–æ:** –ö–æ–º–∞–Ω–¥—ã —Å `/` (–Ω–∞–ø—Ä–∏–º–µ—Ä `/summary`) –≤ Mattermost –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å `!` –∏–ª–∏ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤.

**–ß—Ç–æ —è –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é:**
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –∏ –º–æ–º–µ–Ω—Ç—ã
‚Ä¢ –ó–∞–¥–∞—á–∏ –∏ –≤—ã–≤–æ–¥—ã
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ

–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ"""
                
                await self._send_message(channel_id, welcome_message)
                logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {channel_name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
    
    async def _get_channel_info(self, channel_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            response = self._session_requests.get(
                f"{self.base_url}/api/v4/channels/{channel_id}",
                timeout=10
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return None
    
    def _is_summary_command(self, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π summary"""
        patterns = [
            r'^!summary\s*$',      # !summary - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            r'^summary\s*$',       # summary - –ø—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞
            r'^—Å–∞–º–º–∞—Ä–∏\s*$',       # —Å–∞–º–º–∞—Ä–∏ - —Ä—É—Å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞
            r'^!—Å–∞–º–º–∞—Ä–∏\s*$'       # !—Å–∞–º–º–∞—Ä–∏ - —Ä—É—Å—Å–∫–∞—è —Å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º
        ]
        
        message_lower = message.lower()
        return any(re.match(pattern, message_lower) for pattern in patterns)
    
    async def _handle_summary_command(self, channel_id: str, thread_id: str, message_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
            if not await self._check_channel_permissions(channel_id):
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self._send_message(
                channel_id, 
                "üîÑ –°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                root_id=thread_id
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–¥–∞
            thread_messages = await self._get_thread_messages(thread_id)
            
            if not thread_messages:
                await self._send_message(
                    channel_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ –∏–ª–∏ —Ç—Ä–µ–¥ –ø—É—Å—Ç–æ–π.",
                    root_id=thread_id
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏
            if len(thread_messages) < 2:
                await self._send_message(
                    channel_id,
                    "üìù –í —Ç—Ä–µ–¥–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ (–º–∏–Ω–∏–º—É–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è).",
                    root_id=thread_id
                )
                return
            
            logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(thread_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç—Ä–µ–¥–µ")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏
            summary = await self.llm_client.generate_thread_summary(thread_messages)
            
            if summary:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏
                await self._send_message(channel_id, summary, root_id=thread_id)
                logger.info("‚úÖ –°–∞–º–º–∞—Ä–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                await self._send_message(
                    channel_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å LLM —Å–µ—Ä–≤–∏—Å–æ–º.",
                    root_id=thread_id
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
            try:
                await self._send_message(
                    channel_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    root_id=thread_id
                )
            except:
                # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–µ —É–¥–∞–ª–∞—Å—å
                logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    
    async def _get_thread_messages(self, thread_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–¥–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç-—Ä–æ–¥–∏—Ç–µ–ª—å –∏ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
            root_response = self._session_requests.get(
                f"{self.base_url}/api/v4/posts/{thread_id}",
                timeout=10
            )
            
            if root_response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {root_response.status_code}")
                return []
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–¥
            thread_response = self._session_requests.get(
                f"{self.base_url}/api/v4/posts/{thread_id}/thread",
                timeout=10
            )
            
            if thread_response.status_code != 200:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–¥–∞: {thread_response.status_code}")
                return []
            
            root_post = root_response.json()
            thread_data = thread_response.json()
            
            messages = []
            all_posts = [root_post]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ —Ç—Ä–µ–¥–∞
            posts_dict = thread_data.get('posts', {})
            order = thread_data.get('order', [])
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
            for post_id in order:
                if post_id in posts_dict and post_id != thread_id:
                    all_posts.append(posts_dict[post_id])
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            all_posts.sort(key=lambda x: x.get('create_at', 0))
            
            # –ö–µ—à–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_cache = {}
            
            for post in all_posts:
                user_id = post.get('user_id')
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
                if user_id not in user_cache:
                    try:
                        user_response = self._session_requests.get(
                            f"{self.base_url}/api/v4/users/{user_id}",
                            timeout=5
                        )
                        if user_response.status_code == 200:
                            user_data = user_response.json()
                            user_cache[user_id] = user_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                        else:
                            user_cache[user_id] = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
                    except:
                        user_cache[user_id] = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
                
                username = user_cache[user_id]
                
                messages.append({
                    'username': username,
                    'message': post.get('message', ''),
                    'create_at': post.get('create_at', 0),
                    'user_id': user_id
                })
            
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–¥–∞: {e}")
            return []
    
    async def _send_message(self, channel_id: str, message: str, root_id: Optional[str] = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª"""
        try:
            post_data = {
                'channel_id': channel_id,
                'message': message
            }
            
            if root_id:
                post_data['root_id'] = root_id
            
            response = self._session_requests.post(
                f"{self.base_url}/api/v4/posts",
                json=post_data,
                timeout=10
            )
            
            if response.status_code == 201:
                logger.debug("üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self._running = False
        
        if self._websocket:
            try:
                asyncio.create_task(self._websocket.close())
            except:
                pass
        
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        websocket_connected = False
        if self._websocket is not None:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ
                websocket_connected = not getattr(self._websocket, 'closed', True)
            except:
                websocket_connected = False
        
        status = {
            'mattermost_connected': False,
            'llm_connected': False,
            'bot_running': self._running,
            'websocket_connected': websocket_connected,
            'bot_username': self.bot_username,
            'bot_user_id': self.bot_user_id
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Mattermost
        try:
            if self.base_url and self.token:
                response = self._session_requests.get(
                    f"{self.base_url}/api/v4/users/me",
                    timeout=5
                )
                status['mattermost_connected'] = response.status_code == 200
        except:
            status['mattermost_connected'] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LLM
        try:
            status['llm_connected'] = await self.llm_client.test_connection()
        except:
            status['llm_connected'] = False
        
        return status 