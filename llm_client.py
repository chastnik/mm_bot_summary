import asyncio
import logging
from typing import List, Dict, Any
from openai import AsyncOpenAI
from config import Config

logger = logging.getLogger(__name__)

class LLMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π LLM"""
    
    def __init__(self):
        self.client = AsyncOpenAI(
            api_key=Config.LLM_PROXY_TOKEN,
            base_url=Config.LLM_BASE_URL
        )
        self.model = Config.LLM_MODEL
    
    async def generate_thread_summary(self, messages: List[Dict[str, Any]]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–¥–∞ —Å –ø–æ–ª—è–º–∏ username, message, create_at
            
        Returns:
            –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–∞
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
            thread_context = self._format_thread_for_llm(messages)
            
            system_prompt = """–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö —Å–∞–º–º–∞—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–º:
## üìù –°–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–∞

**üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:**
[—Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤]

**üí¨ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è:**
[–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º]

**üìã –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
[—Å–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤, —Ä–µ—à–µ–Ω–∏–π –∏–ª–∏ —Ñ–∞–∫—Ç–æ–≤]

**‚úÖ –ó–∞–¥–∞—á–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è:**
[—Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á, –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å]

**üéØ –ò—Ç–æ–≥:**
[–∫—Ä–∞—Ç–∫–∏–π –æ–±—â–∏–π –≤—ã–≤–æ–¥]

–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ —Å–æ–∑–¥–∞–π —Å–∞–º–º–∞—Ä–∏:\n\n{thread_context}"}
                ],
                max_tokens=1000,
                temperature=0.3
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def _format_thread_for_llm(self, messages: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ LLM"""
        formatted_messages = []
        
        for msg in messages:
            username = msg.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            message = msg.get('message', '')
            timestamp = msg.get('create_at', '')
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            clean_message = message.strip()
            if clean_message:
                formatted_messages.append(f"{username}: {clean_message}")
        
        return "\n".join(formatted_messages)
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LLM"""
        try:
            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[{"role": "user", "content": "–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"}],
                max_tokens=10
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å LLM: {e}")
            return False 