import asyncio
import logging
import requests
import json
import re
from typing import List, Dict, Any
from config import Config

logger = logging.getLogger(__name__)

class LLMClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π LLM"""
    
    def __init__(self):
        self.base_url = Config.LLM_BASE_URL.rstrip('/')
        self.model = Config.LLM_MODEL
        self.headers = {
            'X-PROXY-AUTH': Config.LLM_PROXY_TOKEN,  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            'Content-Type': 'application/json'
        }
    
    async def generate_thread_summary(self, messages: List[Dict[str, Any]]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—Ä–µ–¥–∞ —Å –ø–æ–ª—è–º–∏ username, message, create_at
            
        Returns:
            –ö—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–∞
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
            thread_context = self._format_thread_for_llm(messages)
            
            system_prompt = """–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö —Å–∞–º–º–∞—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–º:
## üìù –°–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–∞

**üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:**
[—Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤]

**üí¨ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è:**
[–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º]

**üìã –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
[—Å–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤, —Ä–µ—à–µ–Ω–∏–π –∏–ª–∏ —Ñ–∞–∫—Ç–æ–≤]

**‚úÖ –ó–∞–¥–∞—á–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è:**
[—Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á, –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å]

**üéØ –ò—Ç–æ–≥:**
[–∫—Ä–∞—Ç–∫–∏–π –æ–±—â–∏–π –≤—ã–≤–æ–¥]

–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π LLM
            payload = {
                "model": self.model,
                "stream": False,
                "messages": [
                    {
                        "role": "system",
                        "content": "/no_think"
                    },
                    {
                        "role": "system", 
                        "content": system_prompt
                    },
                    {
                        "role": "user",
                        "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ —Å–æ–∑–¥–∞–π —Å–∞–º–º–∞—Ä–∏:\n\n{thread_context}"
                    }
                ],
                "options": {
                    "num_ctx": 16384  # 16K —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                }
            }

            response = await self._send_request(payload)
            if response:
                return response
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    def _clean_response(self, content: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç thinking-–±–ª–æ–∫–æ–≤ –∏ –ª–∏—à–Ω–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not content:
            return content
        
        # –£–¥–∞–ª—è–µ–º thinking-–±–ª–æ–∫–∏
        content = re.sub(r'<think>.*?</think>', '', content, flags=re.DOTALL)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        content = re.sub(r'\n\s*\n\s*\n', '\n\n', content)
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        content = content.strip()
        
        return content
    
    async def _send_request(self, payload: dict) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π LLM"""
        try:
            url = f"{self.base_url}/api/chat"
            
            logger.info(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ LLM: {url}")
            logger.info(f"ü§ñ –ú–æ–¥–µ–ª—å: {self.model}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –≤—ã–∑–æ–≤–æ–º –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None,
                lambda: requests.post(
                    url,
                    headers=self.headers,
                    json=payload,
                    timeout=120  # 2 –º–∏–Ω—É—Ç—ã timeout
                )
            )
            
            if response.status_code == 200:
                response_data = response.json()
                content = response_data.get('message', {}).get('content', '')
                
                if content:
                    # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç thinking-–±–ª–æ–∫–æ–≤
                    cleaned_content = self._clean_response(content)
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(cleaned_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    return cleaned_content
                else:
                    logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM")
                    return ""
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}: {response.text}")
                return ""
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM: {str(e)}")
            return ""
    
    def _format_thread_for_llm(self, messages: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ LLM"""
        formatted_messages = []
        
        for msg in messages:
            username = msg.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            message = msg.get('message', '')
            timestamp = msg.get('create_at', '')
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            clean_message = message.strip()
            if clean_message:
                formatted_messages.append(f"{username}: {clean_message}")
        
        return "\n".join(formatted_messages)
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å LLM"""
        try:
            payload = {
                "model": self.model,
                "stream": False,
                "messages": [
                    {
                        "role": "system",
                        "content": "/no_think"
                    },
                    {
                        "role": "user",
                        "content": "–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
                    }
                ],
                "options": {
                    "num_ctx": 4096
                }
            }
            
            url = f"{self.base_url}/api/chat"
            
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(
                None,
                lambda: requests.post(
                    url,
                    headers=self.headers,
                    json=payload,
                    timeout=30
                )
            )
            
            if response.status_code == 200:
                logger.info("‚úÖ LLM —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå LLM —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å LLM: {e}")
            return False 