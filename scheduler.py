#!/usr/bin/env python3
"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–æ–∫ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, TYPE_CHECKING

from subscription_manager import SubscriptionManager
import pytz

if TYPE_CHECKING:
    from mattermost_bot import MattermostBot

logger = logging.getLogger(__name__)

class SubscriptionScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–æ–∫"""
    
    def __init__(self, bot: 'MattermostBot', subscription_manager: SubscriptionManager):
        self.bot = bot
        self.subscription_manager = subscription_manager
        self._running = False
        self._task = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self._running:
            return
        
        self._running = True
        self._task = asyncio.create_task(self._scheduler_loop())
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self._running = False
        if self._task:
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self._running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await self._check_subscriptions()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(60)
    
    async def _check_subscriptions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫"""
        try:
            current_time = datetime.utcnow()
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ {current_time.strftime('%Y-%m-%d %H:%M:%S')} UTC")
            
            due_subscriptions = self.subscription_manager.get_due_subscriptions(current_time)
            
            if due_subscriptions:
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(due_subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                
                for subscription in due_subscriptions:
                    await self._execute_subscription(subscription)
            else:
                logger.info("üìã –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
    
    async def _execute_subscription(self, subscription: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            user_id = subscription['user_id']
            username = subscription['username']
            channels = subscription['channels']
            frequency = subscription['frequency']
            subscription_id = subscription['id']
            
            logger.info(f"üì§ –í—ã–ø–æ–ª–Ω—è—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {username} –Ω–∞ –∫–∞–Ω–∞–ª—ã: {channels}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–∞—Ö
            missing_channels = []
            available_channels = []
            
            for channel_name in channels:
                channel_info = await self.bot.get_channel_by_name(channel_name)
                if channel_info:
                    channel_id = channel_info['id']
                    if await self.bot._check_channel_permissions(channel_id):
                        available_channels.append((channel_name, channel_id, channel_info))
                    else:
                        missing_channels.append(channel_name)
                else:
                    missing_channels.append(channel_name)
            
            if missing_channels:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
                await self._send_channel_access_error(user_id, missing_channels)
                self.subscription_manager.log_delivery(
                    subscription_id, 
                    'error', 
                    0, 
                    f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º: {', '.join(missing_channels)}"
                )
                return
            
            if not available_channels:
                # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                await self._send_no_channels_error(user_id)
                self.subscription_manager.log_delivery(
                    subscription_id, 
                    'error', 
                    0, 
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
                )
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            since_time, until_time = self.subscription_manager.get_message_collection_period(subscription)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            all_messages = []
            channel_summaries = []
            
            for channel_name, channel_id, channel_info in available_channels:
                messages = await self.bot.get_channel_messages_since(channel_id, since_time)
                if messages:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
                    filtered_messages = []
                    for msg in messages:
                        msg_time = datetime.fromtimestamp(msg.get('create_at', 0) / 1000, tz=pytz.UTC)
                        if since_time <= msg_time <= until_time:
                            filtered_messages.append(msg)
                    
                    if filtered_messages:
                        all_messages.extend(filtered_messages)
                        channel_summaries.append({
                            'channel_name': channel_name,
                            'channel_id': channel_id,
                            'message_count': len(filtered_messages),
                            'display_name': channel_info.get('display_name', channel_name)
                        })
            
            if not all_messages:
                # –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await self._send_no_messages_summary(user_id, channel_summaries, frequency)
                self.subscription_manager.log_delivery(subscription_id, 'success', 0)
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            summary = await self.bot.llm_client.generate_channels_summary(
                all_messages, channel_summaries, frequency
            )
            
            if summary:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await self._send_summary_to_user(user_id, summary, channel_summaries, frequency)
                self.subscription_manager.log_delivery(subscription_id, 'success', len(all_messages))
                logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ –¥–ª—è {username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ({len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π)")
            else:
                # –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏
                await self._send_summary_generation_error(user_id, channel_summaries)
                self.subscription_manager.log_delivery(
                    subscription_id, 
                    'error', 
                    len(all_messages), 
                    "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏"
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            self.subscription_manager.log_delivery(
                subscription_id, 
                'error', 
                0, 
                f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
            )
    
    async def _send_summary_to_user(self, user_id: str, summary: str, 
                                       channel_summaries: List[Dict], frequency: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if frequency == 'daily':
                header = "üìä **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∫–∞–Ω–∞–ª–æ–≤**"
            elif frequency == 'weekly':
                header = "üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∫–∞–Ω–∞–ª–æ–≤**"
            else:
                header = "üìä **–°–≤–æ–¥–∫–∞ –∫–∞–Ω–∞–ª–æ–≤**"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
            channels_info = "\n".join([
                f"‚Ä¢ **{cs['display_name']}** ({cs['message_count']} —Å–æ–æ–±—â–µ–Ω–∏–π)"
                for cs in channel_summaries
            ])
            
            total_messages = sum(cs['message_count'] for cs in channel_summaries)
            
            message = f"""
{header}

**–ö–∞–Ω–∞–ª—ã:**
{channels_info}

**–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** {total_messages}

---

{summary}

---

üí° *–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É*
"""
            
            await self.bot.send_direct_message(user_id, message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")
            raise
    
    async def _send_channel_access_error(self, user_id: str, missing_channels: List[str]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            channels_list = "\n".join(f"‚Ä¢ {channel}" for channel in missing_channels)
            
            message = f"""
‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏**

–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–∞–º:

{channels_list}

**–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã –∫–æ–º–∞–Ω–¥–æ–π `/invite @{self.bot.bot_username}`
2. –õ–∏–±–æ —É–¥–∞–ª–∏—Ç–µ –∏—Ö –∏–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π `—É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É`

üí° *–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É*
"""
            
            await self.bot.send_direct_message(user_id, message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def _send_no_channels_error(self, user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            message = f"""
‚ùå **–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏**

–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –≤ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ.

**–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∫–æ–º–∞–Ω–¥–æ–π `/invite @{self.bot.bot_username}`
2. –õ–∏–±–æ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π `—Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É`

üí° *–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É*
"""
            
            await self.bot.send_direct_message(user_id, message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def _send_no_messages_summary(self, user_id: str, channel_summaries: List[Dict], frequency: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if frequency == 'daily':
                period = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
            elif frequency == 'weekly':
                period = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"
            else:
                period = "–∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
            
            channels_info = "\n".join([
                f"‚Ä¢ **{cs['display_name']}**"
                for cs in channel_summaries
            ])
            
            message = f"""
üìä **–°–≤–æ–¥–∫–∞ –∫–∞–Ω–∞–ª–æ–≤**

**–ö–∞–Ω–∞–ª—ã:**
{channels_info}

‚ÑπÔ∏è –í –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π {period}.

üí° *–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É*
"""
            
            await self.bot.send_direct_message(user_id, message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def _send_summary_generation_error(self, user_id: str, channel_summaries: List[Dict]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏"""
        try:
            message = f"""
‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏**

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å AI —Å–µ—Ä–≤–∏—Å–æ–º.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

üí° *–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É*
"""
            
            await self.bot.send_direct_message(user_id, message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}") 