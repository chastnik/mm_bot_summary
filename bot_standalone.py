#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è Mattermost Summary Bot

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –≤–º–µ—Å—Ç–æ mattermostdriver –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º URL.
"""

import asyncio
import logging
import json
import sys
import requests
import time
from typing import List, Dict, Any, Optional
import uvicorn
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

from config import Config
from llm_client import LLMClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

class SimpleMattermostBot:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –ø—Ä—è–º—ã–º–∏ HTTP –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    
    def __init__(self):
        self.base_url = None
        self.token = None
        self.bot_user_id = None
        self.llm_client = LLMClient()
        self._running = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º URL
            self.base_url = Config.MATTERMOST_URL.strip().rstrip('/')
            if not self.base_url.startswith(('http://', 'https://')):
                self.base_url = 'https://' + self.base_url
            
            self.token = Config.MATTERMOST_TOKEN
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            headers = {'Authorization': f'Bearer {self.token}'}
            response = requests.get(f"{self.base_url}/api/v4/users/me", 
                                  headers=headers, timeout=10, verify=False)
            
            if response.status_code == 200:
                user_data = response.json()
                self.bot_user_id = user_data['id']
                logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫–∞–∫ {user_data['username']} (ID: {self.bot_user_id})")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        return {
            'mattermost_connected': self.bot_user_id is not None,
            'llm_connected': await self.llm_client.test_connection(),
            'bot_running': self._running,
            'mode': 'standalone'
        }
    
    def send_message(self, channel_id: str, message: str, root_id: Optional[str] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            headers = {
                'Authorization': f'Bearer {self.token}',
                'Content-Type': 'application/json'
            }
            
            post_data = {
                'channel_id': channel_id,
                'message': message
            }
            
            if root_id:
                post_data['root_id'] = root_id
            
            response = requests.post(f"{self.base_url}/api/v4/posts", 
                                   headers=headers, 
                                   json=post_data, 
                                   timeout=10, 
                                   verify=False)
            
            if response.status_code == 201:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def demo_summary(self):
        """–î–µ–º–æ-—Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return """## üìù –°–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–∞ (–î–ï–ú–û)

**üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è:**
alice, bob, charlie

**üí¨ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è:**
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏

**üìã –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**
‚Ä¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Mattermost
‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
‚Ä¢ LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞

**‚úÖ –ó–∞–¥–∞—á–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /summary –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ç—Ä–µ–¥–µ
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω LLM –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã

**üéØ –ò—Ç–æ–≥:**
–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –∏ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–µ–¥–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ /summary"""

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Mattermost Summary Bot - Standalone", version="1.0.0")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = SimpleMattermostBot()

@app.get("/", response_class=HTMLResponse)
async def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    status = await bot.health_check()
    
    mattermost_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if status['mattermost_connected'] else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
    llm_status = "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" if status['llm_connected'] else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
    bot_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if status['bot_running'] else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    return f"""
<!DOCTYPE html>
<html>
<head>
    <title>Mattermost Summary Bot - Standalone</title>
    <meta charset="utf-8">
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
        .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
        h1 {{ color: #333; text-align: center; }}
        .status {{ padding: 20px; margin: 10px 0; border-radius: 5px; background: #f8f9fa; }}
        .demo {{ background: #e9ecef; padding: 20px; border-radius: 5px; margin: 20px 0; }}
        pre {{ background: #f8f9fa; padding: 15px; border-radius: 5px; overflow-x: auto; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ Mattermost Summary Bot</h1>
        <h2>Standalone Version</h2>
        
        <div class="status">
            <h3>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</h3>
            <p><strong>–ë–æ—Ç:</strong> {bot_status}</p>
            <p><strong>Mattermost:</strong> {mattermost_status}</p>
            <p><strong>LLM:</strong> {llm_status}</p>
        </div>
        
        <div class="demo">
            <h3>üìù –î–µ–º–æ —Å–∞–º–º–∞—Ä–∏:</h3>
            <pre>{bot.demo_summary()}</pre>
        </div>
        
        <div class="status">
            <h3>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
            <ol>
                <li>–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª: <code>/invite @summary-bot</code></li>
                <li>–í —Ç—Ä–µ–¥–µ –Ω–∞–ø–∏—à–∏—Ç–µ: <code>/summary</code></li>
                <li>–ü–æ–ª—É—á–∏—Ç–µ —Å–∞–º–º–∞—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è!</li>
            </ol>
            
            <h4>üîß API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h4>
            <ul>
                <li><a href="/health">/health</a> - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è</li>
                <li><a href="/status">/status</a> - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å</li>
                <li><a href="/demo">/demo</a> - –¥–µ–º–æ —Å–∞–º–º–∞—Ä–∏</li>
            </ul>
        </div>
    </div>
</body>
</html>"""

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    status = await bot.health_check()
    if status['mattermost_connected']:
        return {"status": "healthy", "details": status}
    else:
        return {"status": "degraded", "details": status}

@app.get("/status")
async def status():
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    return await bot.health_check()

@app.get("/demo")
async def demo():
    """–î–µ–º–æ —Å–∞–º–º–∞—Ä–∏"""
    return {"summary": bot.demo_summary()}

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Standalone Mattermost Summary Bot...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        success = await bot.initialize()
        if not success:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
            return
        
        bot._running = True
        logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        config = uvicorn.Config(
            app,
            host="0.0.0.0",
            port=Config.BOT_PORT,
            log_level="info"
        )
        server = uvicorn.Server(config)
        
        logger.info(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:{Config.BOT_PORT}")
        logger.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
        logger.info("  - / (–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)")
        logger.info("  - /health (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è)")
        logger.info("  - /status (—Å—Ç–∞—Ç—É—Å)")
        logger.info("  - /demo (–¥–µ–º–æ —Å–∞–º–º–∞—Ä–∏)")
        
        await server.serve()
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        bot._running = False
        logger.info("üèÅ Standalone –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        sys.exit(1) 